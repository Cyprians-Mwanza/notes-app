import 'package:equatable/equatable.dart';
import 'package:hive/hive.dart';
import 'package:json_annotation/json_annotation.dart';

part 'note.g.dart';

// Note data model - used for local storage (Hive) and JSON serialization with code generation
@HiveType(typeId: 0) // Hive annotation for local database storage - typeId must be unique
@JsonSerializable() // JSON annotation for automatic serialization/deserialization
class Note extends Equatable {
  @HiveField(0)
  final String? id; // Note identifier - string format for timestamp-based IDs

  @HiveField(1)
  final String title; // Note title - required field with non-null safety

  @HiveField(2)
  final String body; // Note content - required field with non-null safety

  const Note({
    this.id,
    required this.title,
    required this.body,
  });

  // JSON deserialization - automatically generated by json_serializable
  factory Note.fromJson(Map<String, dynamic> json) => _$NoteFromJson(json);

  // JSON serialization - automatically generated by json_serializable
  Map<String, dynamic> toJson() => _$NoteToJson(this);

  // CopyWith method for immutable updates - returns new instance with updated fields
  Note copyWith({
    String? id,
    String? title,
    String? body,
  }) {
    return Note(
      id: id ?? this.id,
      title: title ?? this.title,
      body: body ?? this.body,
    );
  }

  @override
  List<Object?> get props => [id, title, body]; // Equatable for value-based equality
}