import 'package:dio/dio.dart';
import 'package:retrofit/retrofit.dart';
import '../../../../core/constants/app_constants.dart';
import '../../models/api_note.dart';
part 'api_client.g.dart';

// ApiClient - Retrofit-generated HTTP client for JSONPlaceholder API with built-in logging
@RestApi(baseUrl: AppConstants.baseUrl) // Retrofit annotation for base URL configuration
abstract class ApiClient {
  factory ApiClient(Dio dio, {String baseUrl}) = _ApiClient; // Generated implementation

  // Factory method to create pre-configured Dio client with timeouts and logging interceptors
  static ApiClient create() {
    final dio = Dio();
    dio.options = BaseOptions(
      baseUrl: AppConstants.baseUrl,
      headers: {
        'Content-Type': 'application/json', // Set content type for all requests
        'User-Agent': 'FlutterApp', // Identify app in API requests
      },
      connectTimeout: const Duration(seconds: 10), // 10-second connection timeout
      receiveTimeout: const Duration(seconds: 10), // 10-second response timeout
    );

    // Add request/response/error logging interceptor for debugging and monitoring
    dio.interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) {
          print(' Request: ${options.method} ${options.path}'); // Log outgoing requests
          return handler.next(options);
        },
        onResponse: (response, handler) {
          print(' Response: ${response.statusCode}'); // Log response status codes
          return handler.next(response);
        },
        onError: (error, handler) {
          print(' Error: ${error.message}'); // Log error messages
          return handler.next(error);
        },
      ),
    );

    return ApiClient(dio);
  }

  // REST API endpoints for note operations using JSONPlaceholder posts as notes
  @GET("/posts")
  Future<List<ApiNote>> getNotes(); // Fetch all notes from API

  @GET("/posts/{id}")
  Future<ApiNote> getNoteById(@Path("id") int id); // Get single note by integer ID

  @POST("/posts")
  Future<ApiNote> createNote(@Body() ApiNote note); // Create new note (ID generated by API)

  @PUT("/posts/{id}")
  Future<ApiNote> updateNote(@Path("id") int id, @Body() ApiNote note); // Update existing note by ID

  @DELETE("/posts/{id}")
  Future<void> deleteNote(@Path("id") int id); // Delete note by ID (no return data)
}